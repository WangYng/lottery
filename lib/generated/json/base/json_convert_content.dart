// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:lottery/entity/store_entity.dart';
import 'package:lottery/generated/json/store_entity_helper.dart';
import 'package:lottery/entity/ticket_entity.dart';
import 'package:lottery/generated/json/ticket_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case StoreEntity:
				return storeEntityFromJson(data as StoreEntity, json) as T;
			case LotteryTableEntity:
				return lotteryTableEntityFromJson(data as LotteryTableEntity, json) as T;
			case StatisticColorEntity:
				return statisticColorEntityFromJson(data as StatisticColorEntity, json) as T;
			case TicketEntity:
				return ticketEntityFromJson(data as TicketEntity, json) as T;
			case TicketBallEntity:
				return ticketBallEntityFromJson(data as TicketBallEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case StoreEntity:
				return storeEntityToJson(data as StoreEntity);
			case LotteryTableEntity:
				return lotteryTableEntityToJson(data as LotteryTableEntity);
			case StatisticColorEntity:
				return statisticColorEntityToJson(data as StatisticColorEntity);
			case TicketEntity:
				return ticketEntityToJson(data as TicketEntity);
			case TicketBallEntity:
				return ticketBallEntityToJson(data as TicketBallEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (StoreEntity).toString()){
			return StoreEntity().fromJson(json);
		}
		if(type == (LotteryTableEntity).toString()){
			return LotteryTableEntity().fromJson(json);
		}
		if(type == (StatisticColorEntity).toString()){
			return StatisticColorEntity().fromJson(json);
		}
		if(type == (TicketEntity).toString()){
			return TicketEntity().fromJson(json);
		}
		if(type == (TicketBallEntity).toString()){
			return TicketBallEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<StoreEntity>[] is M){
			return data.map<StoreEntity>((e) => StoreEntity().fromJson(e)).toList() as M;
		}
		if(<LotteryTableEntity>[] is M){
			return data.map<LotteryTableEntity>((e) => LotteryTableEntity().fromJson(e)).toList() as M;
		}
		if(<StatisticColorEntity>[] is M){
			return data.map<StatisticColorEntity>((e) => StatisticColorEntity().fromJson(e)).toList() as M;
		}
		if(<TicketEntity>[] is M){
			return data.map<TicketEntity>((e) => TicketEntity().fromJson(e)).toList() as M;
		}
		if(<TicketBallEntity>[] is M){
			return data.map<TicketBallEntity>((e) => TicketBallEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}